# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: Технологии конкурентного программирования
indent: 5
auto_size: 1
vim_opts: '-u NONE'
skip: 0

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme default

---- center
Технологии конкурентного программирования

Илья Чесноков

chesnokov.ilya@gmail.com

----
== Предыстория...

----
== Ресурсы компьютера

* CPU
* RAM
* I/O (HDD, network, ...)

----
== Работа однопоточной программы

  #  I/O             RAM           CPU
 -------------------------------------------------------------
  1  чтение данных   заполнение    ожидание данных (простой)
  2  простой         заполнена     обработка данных
  3  запись данных   освобождение  ожидание данных (простой)
                          ...
  4                     goto #1

----
== Как использовать их эффективно?

+* Выделять достаточно ресурсов под задачи
+* Не давать ресурсам простаивать

----
== Конкурентность и Параллелизм

* Concurrency
  - Программирование как композиция независимо выполняемых процессов
  - Работать с многими вещами одновременно(*)

* Параллелизм
  - Программирование как одновременное выполнение (возможно, связанных)
  вычислений
  - Делать много вещей одновременно(*)

  *(не одно и то же)

----
== Параллельно выполняемые процессы

----
== Forks

* Самый простой способ дублирования процесса
* На заре Unix - самый быстрый
* Отдельная область памяти
  - данные и порядок выполнения не зависят от родителя
* Copy-on-write при создании
* Однопоточный форк использует отдельное ядро CPU (если необходимо/доступно)
  - распределение осуществляется ОС
* Часто используется для распараллеливания обработки данных

----
== Forks

* Ресурсоемкое создание (cpu overhead)
* Требует копирования больших объемов памяти
  - Возможно помещение данных в своп-файл
* Затруднен обмен данными, нужно использовать IPC
  - файлы, сигналы, сокеты, каналы...

----
== Forks

* Создать заранее несколько "рабочих" процессов
* Передавать им данные для обработки
* Например:
  - MCE - Many-Core Engine for Perl
  - Apache mpm_prefork
  - Nginx (*)

---- center

Threads

----
== Threads

* Поток инструкций, который может быть исполнен как независимая единица
  программы ("процедура", выполняемая независимо от основной программы)
* Быстро создаются
* Быстро переключается контекст

----
== Threads
* Имеют общие с процессом данные
  - легко наладить коммуникацию
  - нужно использовать специальные механизмы для блокирования
* Каждый тред имеет:
  - стек
  - приоритет выполнения
  - собственные данные
* Распределяются на все ядра CPU планировщиком ОС
  - в соответствии с приоритетом
  - "вытесняющая многозадачность"

----
== Классическая реализация - pthreads

---- .c,i4
---- include ../examples/threads/te.c

----
== Perl Threads

----
== Interpreter-based threads aka "Windows process emulation"

* Используются реальные треды, но для эмуляции
* Эмулируют процессы Unix на Windows
* Эмулируют процессы Unix на Unix (OMG!)
* Заменили модель "настоящих" тредов (5.005-threads)

----
== Perl Threads

* Копируется состояние
* Изолируются модификации
* Общие данные на самом деле не являются общими, а копируются
  - приводит к сильному падению производительности в задачах
  с большим объемом коммуникаций
* forks - API для threads с настоящими процессами (а не эмуляцией)

----
== Примеры

----
== Мало тредов, большая нагрузка

---- perl,i4
---- include ../examples/threads/threads.pl

---- perl,i4
---- include ../examples/threads/forks.pl

---- perl,i4
---- include ../examples/threads/loop.pl

---- center
|--------------------------------------------|
|             | Время, с | Multicore |  RAM  |
|--------------------------------------------|
|threads      |    33    |     Y     |   =   |
|forks        |    33    |     Y     |   =   |
|loop         |    62    |     N     |   =   |
|--------------------------------------------|

----
== Много тредов, маленькая нагрузка

---- perl,i4
---- include ../examples/threads/threads-many.pl

---- perl,i4
---- include ../examples/threads/forks-many.pl

---- perl,i4
---- include ../examples/threads/loop-many.pl

---- center

|--------------------------------------------|
|             | Время, с | Multicore |  RAM  |
|--------------------------------------------|
|threads      |    33    |     Y     |   =   |
|forks        |    33    |     Y     |   =   |
|loop         |    62    |     N     |   =   |
|--------------------------------------------|
|threads-many |    75    |     Y     |  >>>  |
|forks-many   |    68    |     Y     |   =   |
|loop-many    |    0.66  |     N     |   =   |
|--------------------------------------------|

----
== Типичные сценарии / проблемы работы тредов

* "Счет в банке" (nondeterminism)
+* "В булочной" (starvation)
+* "Телефонная будка" (mutex)
+* "Отдых в горах" (deadlock)
+* "Обедающие философы" (starvation, deadlock)

----
== Решение проблем

* Мьютексы (Mutually Exclusive variables)
* Переменные-условия (Conditional Variables)

----
== Проблемы ввода / вывода

* Диск / сеть - медленные устройства по сравнению с CPU / RAM
* При чтении/записи в "обычном" режиме происходит "блокировка",
  в результате чего ресурсы используются неэффективно
   - процессор простаивает
   - система I/O загружена не полностью
* Как этого избежать?

----
== Треды?

----
== Асинхронность!

* Для каждого источника:
  - Ставим задачу на чтение/запись, указав callback-функцию
* Callback-функция копирует доступную информацию в буфер для
  обработки
* "Синхронная" обработка выполняется в период ожидания следующего
  события или другим процессом
  - (не в callback-функции!)

----
== AnyEvent

* Поддерживает несколько "бэкендов", которые "уведомляют" о событиях
* При загрузке определяет используемый бэкенд
  - EV, Perl, Event, GTK, TK, UV, EventLib, POE, Irssi, ...
  - Дальнейшие операции используют функции бэкенда
* Регистрирует заинтересованность процесса в тех или иных событиях
  - I/O, таймаут, сигнал, завершение дочернего процесса, простой
* При наступлении события бэкенд вызывает callback

---- perl,i4
---- include ../examples/anyevent/watchers.pl

----
== AnyEvent->condvar()

----
== AnyEvent->io()

----
== AnyEvent->timer()

----
== AnyEvent->idle()

---- center
$cv->send;

$cv->recv;

----
== Callback-функции

* Вызываются в цикле событий
  - никакой магии :)

* При блокировке в callback-е вся программа ждет завершения блокировки
  - не поступают новые события
  - теряется смысл асинхронности

---- perl,i4

# Конечно, нельзя делать так:
use AnyEvent;
my $cv = AnyEvent->condvar;
my $cv2 = AnyEvent->condvar;

my $timer = AnyEvent->timer(after => 1, cb => sub {
    # Запуск еще одного цикла???
    $cv2->recv;
});
$cv->recv;

----
== Корутины (сопрограммы, coroutines)

----
== Корутины

* Это обобщенные подпрограммы, которые могут иметь несколько
  точек выхода и повторного входа с сохранением состояния.

* Реализуют "кооперативную многозадачность" - в противовес "вытесняющей
  многозадачности" корутина сама уведомляет планировщик о готовности
  прервать свое выполнеине.

----
== Coro - "The only real threads in Perl"

---- perl,i4
---- include ../examples/coro/0_coro.pl

----
== Вернемся к вычислительной задаче

---- perl,i4
---- include ../examples/threads/coro.pl

---- perl,i4
---- include ../examples/threads/coro-many.pl

---- center

|--------------------------------------------|
|             | Время, с | Multicore |  RAM  |
|--------------------------------------------|
|threads      |    33    |     Y     |   =   |
|forks        |    33    |     Y     |   =   |
|loop         |    62    |     N     |   =   |
|coro         |    63    |     N     |   =   |
|--------------------------------------------|
|threads-many |    75    |     Y     |  >>>  |
|forks-many   |    68    |     Y     |   =   |
|loop-many    |   0.66   |     N     |   =   |
|coro-many    |   0.75   |     N     |   =   |
|--------------------------------------------|

----
== Возможность "ожидания" для AnyEvent без использования $cv

---- perl,i4
---- include ../examples/coro/timer.pl

----
== Семафоры

* Позволяют ограничивать число одновременно работающих потоков

---- perl,i4
---- include ../examples/coro/1_semaphore.pl

----
== Сигналы

* Позволяют ставить потоки "на паузу" до получения сигнала

---- perl,i4
---- include ../examples/coro/2_signal.pl

----
== Канал (очередь)

* Позволяет писать и читать данные любым числом потоков
  в конкурентном режиме
* "Писатели" блокируются при достижении лимита канала
* "Читатели" блокируются при опустошении канала
* При блокировке управление передается в другой поток
  - чем-то напоминает каналы в Go?

---- perl,i4
---- include ../examples/coro/3_channel.pl

----
== Coro::Multicore

* Экспериментальный модуль для работы на нескольких ядрах
* Работает только для специальным образом подготовленного XS кода
  - который не трогает Perl-структуры

----
== Итого: Coro

:) Реализует паттерн "кооперативная многозадачность"
:) Упрощает работу с AnyEvent за счет отказа от глубокой вложенной
   структуры коллбэков
:) Позволяет создавать быстрые и "легкие" корутины
:) Поддерживает "из коробки" абстракции, привычные для тредов

:( Работает на одном ядре (по крайней мере пока)
:( Не поддерживается автором в Perl 5.22

----
== Язык Go - корутины помноженные на треды

* Используется небольшой стек с изменяемым размером
* По умолчанию работает на одном треде
* При блокировке одной из горутин остальные перемещаются
  в другой тред *незаметно для программиста*
  - в этом самый большой прикол Go
* Помимо блокирующих вызовов такой эффект приносит ожидание
  коммуникации на канале

----
== Вопросы?

----
== Спасибо!
